version: '3.8'

services:
  # Base de datos MySQL
  mysql:
    image: mysql:latest
    container_name: mysql-container
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: users_api
      MYSQL_PASSWORD: root
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - app-network

  # Cache Memcached
  memcached:
    image: memcached:latest
    container_name: memcached-container
    ports:
      - "11211:11211"
    networks:
      - app-network

  # MongoDB para hotels-api
  mongo:
    image: mongo:4
    container_name: mongo-container
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    networks:
      - app-network

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbit-container
    ports:
      - "5671:5671"
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: root
      RABBITMQ_DEFAULT_PASS: root
    networks:
      - app-network

  # Solr para b√∫squeda
  solr:
    image: solr:latest
    container_name: solr-container
    ports:
      - "8983:8983"
    volumes:
      - ./search-api/solr-config:/opt/solr/server/solr/hotels
    command: solr-create -c hotels
    networks:
      - app-network

  # Primera instancia de users-api
  users-api:
    image: users-api:latest
    container_name: users-api-container
    build:
      context: ./users-api
      dockerfile: Dockerfile
    command: /bin/sh -c "sleep 20 && until nc -z mysql 3306; do sleep 1; done && go run main.go"
    ports:
      - "8080:8080"
    depends_on:
      - mysql
      - memcached
    networks:
      - app-network
    restart: on-failure

  # Segunda instancia de users-api
  users-api-2:
    image: users-api:latest
    container_name: users-api-container-2
    build:
      context: ./users-api
      dockerfile: Dockerfile
    command: /bin/sh -c "sleep 20 && until nc -z mysql 3306; do sleep 1; done && go run main.go"
    ports:
      - "8083:8080" # Puerto adicional para pruebas individuales
    depends_on:
      - mysql
      - memcached
    networks:
      - app-network
    restart: on-failure

  # NGINX como balanceador de carga
  nginx:
    image: nginx:latest
    container_name: nginx-container
    ports:
      - "8085:80" # Exponer el puerto 8085 para NGINX
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - users-api
      - users-api-2
    networks:
      - app-network

  # hotels-api
  hotels-api:
    image: hotels-api:latest
    container_name: hotels-api-container
    build:
      context: ./hotels-api
    ports:
      - "8081:8081"
    command: /bin/sh -c "sleep 10 && until nc -z rabbitmq 5672; do sleep 1; done && go run main.go"
    depends_on:
      - mongo
      - rabbitmq
    networks:
      - app-network
    restart: on-failure

  # search-api
  search-api:
    image: search-api:latest
    container_name: search-api-container
    build:
      context: ./search-api
    ports:
      - "8082:8082"
    command: /bin/sh -c "sleep 10 && until nc -z rabbitmq 5672; do sleep 1; done && go run main.go"
    depends_on:
      - rabbitmq
      - solr
    networks:
      - app-network
    restart: on-failure

  # Frontend (React)
  frontend_hoteles:
    image: frontend_hoteles:latest
    container_name: frontend_hoteles
    build:
      context: ./frontend_hoteles
    ports:
      - "3001:3000" # Mapeo para el servidor de desarrollo de React
    depends_on:
      - nginx
    networks:
      - app-network
    restart: on-failure
    environment:
      - REACT_APP_USERS_API=http://nginx:8085
      - REACT_APP_HOTELS_API=http://hotels-api:8081
      - REACT_APP_SEARCH_API=http://search-api:8082

networks:
  app-network:
    driver: bridge

volumes:
  mysql-data:
